#!/usr/bin/env python

# MIT License:
#
# Copyright (c) 2010, Tycho Andersen. All rights reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""

  A small program to automatically generate passwords. After much discussion, I
  settled on this solution. The problem is that places often have weird
  restrictions on passwords, disallowing certain symbols. The password I
  generated for myself long ago has lots of strange symbols which are typically
  disallowed by these filters; I'm not sure why, as it reduces password entropy
  :-(. Anyway, I wanted to have a way to automatically generate passwords which
  has the following properties:

    * different passwords per site
    * good passwords (modulo the next point)
    * passwords get past most filters (i.e. they're in the base62 alphabet)
    * no persistant storage. I want to be able to recover the password from
      anywhere, not just a particular computer with some GUI on it. Further,
      persistant storage means it could be stored insecurely by mistake, since
      I'm not a crypto genius.

  The entropy of these passwords is fairly high due to hashing (it's a little
  watered down due to the last two steps, but not much), and the solution
  satisfies the other three properties. It is highly likely that there are both
  upper and lower case letters, though numbers is less likely, but we do some
  post-processing to insert one if need-be).

  I believe this is secure unless there is some kind of attack on the first few
  bits of sha512. Your user secret should be a *good* password that is *long*!
  The longer the better. See the relevant xkcd for more info:
  https://xkcd.com/936/

"""

import hashlib
from sys import argv, exit
from base64 import b64encode
from getpass import getpass
from passlib.utils.pbkdf2 import pbkdf2

def usage():
  print "usage:"
  print argv[0], "string [length]"
  print "Where length is an optional length of the password (defaults to 10)."
  exit()

# invalid arguments?
if len(argv) not in [2,3]:
  usage()

# what's the string to hash?
string = argv[1]

# how long of a password should we generate?
length = 10
if len(argv) == 3:
  try:
    length = int(argv[2])
  except ValueError:
    usage()

# get some secret bits from the user
secret = pbkdf2(getpass(), string, 100000, prf='hmac-sha512')


ans = b64encode(secret, string)[:length]

def contains_a_number(s):
  """ Does this string contain a number? """
  for c in s:
    try:
      int(c)
      return True
    except ValueError:
      pass

def to_number(c):
  """ Turn the specified character into a number """
  return str((ord(c.upper()) - ord('A'))%10)

if not contains_a_number(ans):
  ans = ans[:-1] + to_number(ans[-1])

print ans

